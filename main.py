import json
import telebot
from telebot import types
from config.auto_search_dir import data_config, path_to_config_json, path_to_img_volley, path_to_img_fish
from telebot.types import BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
from telebot.apihelper import ApiException

bot = telebot.TeleBot(data_config['my_telegram_bot']['bot_token'], parse_mode='HTML')


class Main:
    def __init__(self):
        self.state_stack = {}  # –°—Ç–µ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.selected_users = set()
        self.selected_video_stat = set()
        self.keys = []
        self.select_command = None
        self.markup = None
        self.call = None
        self.admin = None
        self.start_main()

    def entry(self, message):
        # –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ :

        admins = list(value for value in self.load_data()["admins"].values())
        users = [name for command in self.load_data()["commands"].keys() for name
                 in self.load_data()["commands"][command]["users"].values()]
        username = str(message.chat.username).replace('@', '')

        if any(user in admins for user in [message.chat.id, username]):
            self.admin = True
        elif any(user in users for user in [message.chat.id, username]):
            self.admin = False
        else:
            self.admin = None
            try:
                bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É –±–æ—Ç—É")
                bot.delete_message(message.chat.id, message.message_id)
            except:
                pass

    def load_data(self):
        with open(path_to_config_json, 'r', encoding='utf-8') as file:
            return json.load(file)

    def write_data(self, data):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
        with open(path_to_config_json, 'w', encoding='utf-8') as file:
            json.dump(data, file, ensure_ascii=False, indent=4)

    def start_main(self):
        bot.set_my_commands([BotCommand("start", "–í –Ω–∞—á–∞–ª–æ"), BotCommand("back", "–ù–∞–∑–∞–¥")])

        @bot.message_handler(commands=['start'])
        def handle_start(message):
            if message.message_id:
                try:
                    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                except:
                    pass
            self.entry(message)
            if self.admin is not None:
                # –æ—á–∏—â–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                self.keys.clear()
                self.state_stack.clear()
                self.show_start_menu(message)

        @bot.message_handler(commands=['back'])
        def handle_back(message):
            self.entry(message)
            if message.message_id:
                try:
                    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                except:
                    pass
            if self.admin is None:
                return
            elif '–ù–∞—á–∞—Ç—å' in self.state_stack.keys() and self.keys:
                self.keys.pop()
                self.navigate()
            elif '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' in self.state_stack.keys():
                if len(self.state_stack) == 1:
                    self.state_stack.clear()
                    self.show_start_menu(message)
                    return
                elif list(self.state_stack.keys())[-1] in ('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ'):
                    del self.state_stack[str(list(self.state_stack.keys())[-1])]
                    self.edit_command()
                else:
                    while self.state_stack:
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª—é—á
                        last_key = next(reversed(self.state_stack))
                        last_function = self.state_stack[last_key]
                        try:

                            # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
                            last_function()
                            break  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –≤—ã–∑–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ
                        except:
                            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                            del self.state_stack[last_key]

                            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
            else:
                self.keys.clear()
                self.state_stack.clear()
                self.show_start_menu(message)

        @bot.callback_query_handler(func=lambda call: True)
        def handle_query(call):
            self.call = call
            self.entry(call.message)
            if self.admin is None:
                return

            elif '–ù–∞—á–∞—Ç—å' in [self.call.data] + list(self.state_stack.keys()):
                if not self.state_stack:
                    self.state_stack[self.call.data] = self.show_start_menu
                else:
                    self.keys.append(self.call.data)
                self.navigate()
            actions = {
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": self.control_buttons,
                "–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É": self.add_dell_users,
                "–û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø": self.del_buttons_commands,
                "–ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø": self.del_buttons_commands,
                "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥": self.del_buttons_commands,
                "üíæ –ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø!": self.dell_users_or_admins,
                "cancel_dell": self.dell_users_or_admins,
                "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É": self.edit_statistic,
                "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ": self.edit_video,
                "–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ": self.add_video_statis,
                "–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É": self.add_video_statis,
                "–£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ": self.dell_video_statis,
                "–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É": self.dell_video_statis,
                "save_dell_video_stats": self.dell_users_or_admins,
                "cancel_dell_video_stats": self.dell_users_or_admins
            }
            if self.admin:
                if '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' in [self.call.data] + list(self.state_stack.keys()):
                    if self.call.data in (actions.keys()):
                        self.state_stack[self.call.data] = actions[self.call.data]
                        actions[self.call.data]()

                    elif self.call.data in list(self.load_data()["commands"].keys()) + ['admins']:
                        if list(self.state_stack.keys())[-1] == '–ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø':
                            self.select_command = self.call.data
                            self.close()
                        elif list(self.state_stack.keys())[-1] == '–û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø':
                            self.select_command = self.call.data
                            self.open()
                        elif list(self.state_stack.keys())[-1] == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥':
                            self.select_command = self.call.data
                            self.edit_command()
                    elif self.call.data.startswith("toggle_"):
                        user_key = '_'.join(self.call.data.split("_")[1:])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if list(self.state_stack.keys())[-1] == '–ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø':
                            if user_key in self.selected_users:
                                self.selected_users.remove(user_key)  # –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
                            else:
                                self.selected_users.add(user_key)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                            self.close()  # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                        elif list(self.state_stack.keys())[-1] in ('–£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ', '–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'):
                            if user_key in self.selected_video_stat:
                                self.selected_video_stat.remove(user_key)  # –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
                            else:
                                self.selected_video_stat.add(user_key)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                            self.dell_video_statis()

    def show_start_menu(self, message):
        self.markup = InlineKeyboardMarkup()
        self.markup.add(InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data="–ù–∞—á–∞—Ç—å"))
        response_text = f"""–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ: <u>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</u>\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /back. –í –Ω–∞—á–∞–ª–æ /start \n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:""",
        if self.admin:
            self.markup.add(InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"))
        try:
            bot.edit_message_text(
                chat_id=self.call.message.chat.id,
                message_id=self.call.message.message_id,
                text=response_text,
                reply_markup=self.markup,
                parse_mode="HTML"  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML
            )
        except ApiException as e:
            if "Message is not modified" in str(e):
                return  # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ
            if self.load_data()["commands"]['RedHeads']['users']:
                if any(user in self.load_data()["commands"]['RedHeads']['users'].values() for user in
                       [message.chat.id, str(message.chat.username).replace('@', '')]):
                    with open(path_to_img_fish, 'rb') as photo:
                        bot.send_photo(message.chat.id, photo)
                else:
                    with open(path_to_img_volley, 'rb') as photo:
                        bot.send_photo(message.chat.id, photo)
            else:
                with open(path_to_img_volley, 'rb') as photo:
                    bot.send_photo(message.chat.id, photo)

            bot.send_message(chat_id=message.chat.id, text=response_text, reply_markup=self.markup)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    def navigate(self):
        data = self.load_data()["commands"]

        for key in self.keys:
            data = data.get(key, {})
            # —É–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
            data.pop('users', None)
        if isinstance(data, dict) and data:
            self.markup = InlineKeyboardMarkup()

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            sorted_keys = sorted(data.keys())

            for k in sorted_keys:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏
                v = data[k]
                if isinstance(v, str) and v.startswith("http"):
                    self.markup.add(InlineKeyboardButton(k, url=v))
                else:
                    self.markup.add(
                        InlineKeyboardButton(k, callback_data=f"{k}" if self.call.data else k))

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å —Å –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª—é—á–∞
            if self.keys:
                last_key = f"<u>{self.keys[-1]}</u>"
                section_path = " - ".join(self.keys[:-1] + [last_key])  # –í—Å–µ, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ, –æ—Å—Ç–∞—é—Ç—Å—è –æ–±—ã—á–Ω—ã–º–∏
                full_path = f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –ö–æ–º–∞–Ω–¥—ã - {section_path}"  # –î–æ–±–∞–≤–ª—è–µ–º "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤ –Ω–∞—á–∞–ª–æ
            else:
                full_path = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - <u>–ö–æ–º–∞–Ω–¥—ã</u>"  # –ï—Å–ª–∏ –∫–ª—é—á–µ–π –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

            bot.edit_message_text(
                chat_id=self.call.message.chat.id,
                message_id=self.call.message.message_id,
                text=f"""–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ: {full_path}\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /back. –í –Ω–∞—á–∞–ª–æ /start \n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:""",
                reply_markup=self.markup,
                parse_mode="HTML"  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML
            )

    def control_buttons(self):
        buttons = [InlineKeyboardButton(key, callback_data=key) for key in
                   ["–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥"]]
        self.markup = InlineKeyboardMarkup([buttons])
        new_text = """–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - <u>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</u>.\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /back. –í –Ω–∞—á–∞–ª–æ /start \n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"""
        bot.edit_message_text(
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id,
            text=new_text,
            reply_markup=self.markup,
            parse_mode="HTML"  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML
        )

    def add_dell_users(self):
        self.markup = InlineKeyboardMarkup()
        self.markup.add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="–û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø"))
        self.markup.add(InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="–ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø"))
        new_text = """–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ -  <u>–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É</u>.\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /back. –í –Ω–∞—á–∞–ª–æ /start \n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"""
        bot.edit_message_text(
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id,
            text=new_text,
            reply_markup=self.markup,
            parse_mode="HTML"  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML
        )

    def del_buttons_commands(self):
        print(self.call.data)
        print(list(self.state_stack.keys()))
        buttons = [InlineKeyboardButton(key, callback_data=key) for key in self.load_data()["commands"].keys()]
        self.markup = InlineKeyboardMarkup([buttons])

        text_responce = ''
        if self.call.data in ('–û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø', '–ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø'):
            text_responce = f"–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É - <u>{self.call.data}</u>"
            self.markup.add(InlineKeyboardButton("–ê–¥–º–∏–Ω—ã", callback_data="admins"))
        elif self.call.data in ["–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É", '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥']:
            text_responce = f"<u>{self.call.data}</u>"
        elif self.call.data in ['üíæ –ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø!', 'cancel_dell', 'admins'] + list(
                self.load_data()["commands"].keys()) and list(self.state_stack.keys())[-1] == '–ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø':
            text_responce = f"–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É - <u>–ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø</u>"
            self.markup.add(InlineKeyboardButton("–ê–¥–º–∏–Ω—ã", callback_data="admins"))
        elif self.call.data in list(self.load_data()["commands"].keys()) and list(self.state_stack.keys())[
            -1] in ('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥'):
            text_responce = f"–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É - <u>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥</u>"
        elif list(self.state_stack.keys())[-1] in ('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥'):
            text_responce = f"–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É - <u>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥</u>"
        new_text = f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - {text_responce}.\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /back. –í –Ω–∞—á–∞–ª–æ /start \n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
        bot.edit_message_text(
            new_text,
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id,
            reply_markup=self.markup
        )

    def close(self):
        self.markup = InlineKeyboardMarkup()
        buttons = []
        users = (
            self.load_data()["commands"][self.select_command]["users"].items() if self.select_command != 'admins' else
            self.load_data()[self.select_command].items())
        for keys, value in users:
            is_selected = f"{keys}_{value}_{self.select_command}" in self.selected_users  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            icon = "‚úÖ" if is_selected else "‚ùå"  # –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É
            button_text = f"{icon} {keys}({value})"
            item = types.InlineKeyboardButton(button_text,
                                              callback_data=f"toggle_{keys}_{value}_{self.select_command}")
            buttons.append(item)

        self.markup.add(*buttons)
        select_command = '–ê–¥–º–∏–Ω—ã' if self.select_command == 'admins' else self.select_command
        save = InlineKeyboardButton("üíæ –ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø!", callback_data='üíæ –ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø!')
        cancel = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞!", callback_data='cancel_dell')
        self.markup.add(cancel, save)
        new_text = f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ -  –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É - –ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø -  <u>{select_command}</u>.\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /back. –í –Ω–∞—á–∞–ª–æ /start \n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"

        bot.edit_message_text(
            new_text,
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id,
            reply_markup=self.markup
        )

    def dell_users_or_admins(self):

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        data = self.load_data()
        if self.select_command == 'admins' and len(self.load_data()['admins'].keys()) == 1 and self.selected_users:
            response_text = '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 1 –∞–¥–º–∏–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –£–î–ê–õ–ï–ù'
            bot.answer_callback_query(self.call.id, response_text,
                                      show_alert=True)
            self.selected_users = set()
            self.state_stack = dict(list(self.state_stack.items())[:-2])

            self.del_buttons_commands()
            return

        elif self.select_command and self.selected_users:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user in self.selected_users:
                data_user = user.split("_")
                if data_user[-1] != 'admins':
                    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                    if data_user[0] in data["commands"][data_user[-1]]["users"]:
                        del data["commands"][data_user[-1]]["users"][data_user[0]]
                else:

                    if data_user[0] in data["admins"]:
                        del data["admins"][data_user[0]]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
            self.write_data(data)  # –ü–µ—Ä–µ–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            response_text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã' if len(self.selected_users) > 1 else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω'
            bot.answer_callback_query(self.call.id, response_text,
                                      show_alert=True)
            self.selected_users = set()
            self.state_stack = dict(list(self.state_stack.items())[:-1])
            self.del_buttons_commands()

        elif self.selected_video_stat:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user in self.selected_video_stat:
                data_user = user.split("_")
                if data_user[0] in data["commands"][data_user[-1]][data_user[-2]]:
                    del data["commands"][data_user[-1]][data_user[-2]][data_user[0]]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
            self.write_data(data)  # –ü–µ—Ä–µ–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            response_text = '–°—Å—ã–ª–∫–∏ —É–¥–∞–ª–µ–Ω—ã' if len(self.selected_video_stat) > 1 else '–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞'
            bot.answer_callback_query(self.call.id, response_text,
                                      show_alert=True)
            self.selected_video_stat = set()
            self.state_stack = dict(list(self.state_stack.items())[:-2])
            self.edit_command()
        elif str(list(self.state_stack.keys())[-2]) not in ('–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', '–£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ'):
            self.selected_users = set()
            self.selected_video_stat = set()
            self.state_stack = dict(list(self.state_stack.items())[:-2])
            self.del_buttons_commands()
        elif str(list(self.state_stack.keys())[-2]) in ('–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', '–£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ'):
            self.selected_users = set()
            self.selected_video_stat = set()
            self.state_stack = dict(list(self.state_stack.items())[:-2])
            if str(list(self.state_stack.keys())[-1]) == '–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É':
                self.edit_statistic()
            else:
                self.edit_video()

    def open(self):
        text = self.select_command if self.select_command != 'admins' else '–ê–¥–º–∏–Ω—ã'
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        bot.edit_message_text(
            f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ -  –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É - –û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø - <u>{text}</u>.\n\n–ò—Å–ø–æ–ª—å–∑—É–π "
            f"–∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /back. –í –Ω–∞—á–∞–ª–æ /start "
            f"\n\n–ù–∞–ø–∏—à–∏—Ç–µ –ù–∏–∫ –∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ, –ø—Ä–∏–º–µ—Ä:\n –í–∞—Å—è:2938214371 –∏–ª–∏ "
            f"–ü–µ—Ç—è:@petya (–º–æ–∂–Ω–æ –±–µ–∑ @). \n–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–∫–æ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, "
            f"–ø—Ä–∏–º–µ—Ä:\n–í–∞—Å—è:2938214371, –ü–µ—Ç—è:@petya, Lena:lenusik",
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.register_next_step_handler(self.call.message,
                                       self.process_employee_name)

    def process_employee_name(self, message):
        text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω"
        if message.text not in ['/back',
                                '/start']:
            if ":" in str(message.text):
                employee_name = str(message.text).replace(' ', '').replace('\n', ',').replace(',,', '').replace('@',
                                                                                                                '').split(
                    ',')  # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

                data = self.load_data()

                for new_name in employee_name:
                    name, value = new_name.split(":")
                    if len(name) >= 4 and len(value) >= 4:
                        if self.select_command != 'admins' and value not in data["commands"][self.select_command][
                            "users"].values():
                            data["commands"][self.select_command]["users"][name] = value
                        elif self.select_command == 'admins' and value not in data["admins"].values():
                            data["admins"][name] = value
                        else:
                            text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: {value} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                            bot.answer_callback_query(self.call.id, text,
                                                      show_alert=True)
                            try:
                                bot.delete_message(chat_id=message.chat.id,
                                                   message_id=message.message_id)
                            except:
                                pass
                    else:
                        try:
                            bot.delete_message(chat_id=message.chat.id,
                                               message_id=message.message_id)
                        except:
                            pass
                        response_test = '–ù–∏–∫ –∏–ª–∏ id –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞'
                        bot.answer_callback_query(self.call.id, response_test,
                                                  show_alert=True)
                        self.selected_users = set()
                        self.selected_video_stat = set()
                        self.call.data = '–û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø'
                        self.del_buttons_commands()
                        return
                self.write_data(data)
                if len(employee_name) > 1:
                    text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
                bot.answer_callback_query(self.call.id, text,
                                          show_alert=True)
                try:
                    bot.delete_message(chat_id=message.chat.id,
                                       message_id=message.message_id)
                except:
                    pass
                self.selected_users = set()
                self.selected_video_stat = set()
                self.call.data = '–û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø'
                self.del_buttons_commands()
            else:
                try:
                    bot.delete_message(chat_id=message.chat.id,
                                       message_id=message.message_id)
                except:
                    pass
                response_test = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
                bot.answer_callback_query(self.call.id, response_test,
                                          show_alert=True)
        else:
            try:
                bot.delete_message(chat_id=message.chat.id,
                                   message_id=message.message_id)
            except:
                pass
            self.selected_users = set()
            self.selected_video_stat = set()
            self.call.data = '–û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø'
            self.del_buttons_commands()

    def edit_command(self):
        self.markup = InlineKeyboardMarkup()
        self.markup.add(InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ"))
        self.markup.add(InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏—Ç–∏—Å—Ç–∏–∫—É", callback_data="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"))
        new_text = f"""–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ -  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ - <u>{self.select_command}</u>\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /back. –í –Ω–∞—á–∞–ª–æ /start \n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"""
        bot.edit_message_text(
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id,
            text=new_text,
            reply_markup=self.markup,
            parse_mode="HTML"  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML
        )

    def edit_video(self):
        self.markup = InlineKeyboardMarkup()
        self.markup.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ"))
        self.markup.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="–£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ"))
        new_text = f"""–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ -  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ - {self.select_command} - <u>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ</u>\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /back. –í –Ω–∞—á–∞–ª–æ /start \n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"""
        bot.edit_message_text(
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id,
            text=new_text,
            reply_markup=self.markup,
            parse_mode="HTML"  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML
        )

    def edit_statistic(self):
        self.markup = InlineKeyboardMarkup()
        self.markup.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"))
        self.markup.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"))
        new_text = f"""–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ -  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ - {self.select_command} - <u>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏—Ç–∏—Å—Ç–∏–∫—É</u>\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /back. –í –Ω–∞—á–∞–ª–æ /start \n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"""
        bot.edit_message_text(
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id,
            text=new_text,
            reply_markup=self.markup,
            parse_mode="HTML"  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML
        )

    def add_video_statis(self):
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        bot.edit_message_text(
            f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ -  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ - {self.select_command} - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {self.call.data.split(' ')[-1]} - <u>{self.call.data}</u> .\n\n–ò—Å–ø–æ–ª—å–∑—É–π "
            f"–∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /back. –í –Ω–∞—á–∞–ª–æ /start "
            f"\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ  –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ, –ø—Ä–∏–º–µ—Ä:\n–°–µ–∑–æ–Ω 2024-2025:https://disk.yandex.ru/d/bWFMzczzg"
            f"\n–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–∫–æ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, "
            f"–ø—Ä–∏–º–µ—Ä:\n–°–µ–∑–æ–Ω 2024-2025:https://disk.yandex.ru/d/bWFMzczzg, –°–µ–∑–æ–Ω 2025-2026:https://disk.yandex.ru/d/bW343Mzczzg",
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.register_next_step_handler(self.call.message,
                                       self.add_list)

    def add_list(self, message):
        get_video_stats = '–í–∏–¥–µ–æ' if self.call.data.split(' ')[-1] == '–≤–∏–¥–µ–æ' else '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
        if message.text not in ['/back',
                                '/start']:
            if ":" in str(message.text):
                new_video_stats = str(message.text).replace(' ', '').replace('\n', ',').replace(',,', '').replace('@',
                                                                                                                  '').split(
                    ',')  # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

                data = self.load_data()
                for new_name in new_video_stats:
                    name, value = new_name.split(":", 1)
                    if len(name) >= 4 and len(value) >= 4 and value[:4] == 'http':
                        if value not in data["commands"][self.select_command][
                            get_video_stats].values():
                            data["commands"][self.select_command][get_video_stats][name] = value
                        else:
                            text = f'–°—Å—ã–ª–∫–∞ {value} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                            bot.answer_callback_query(self.call.id, text,
                                                      show_alert=True)
                            try:
                                bot.delete_message(chat_id=message.chat.id,
                                                   message_id=message.message_id)
                            except:
                                pass
                    else:
                        try:
                            bot.delete_message(chat_id=message.chat.id,
                                               message_id=message.message_id)
                        except:
                            pass
                        response_test = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã —É–∫–∞–∑–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è. –û–∂–∏–¥–∞–µ—Ç—Å—è –¥–ª–∏–Ω–∞ –∫–ª—é—á–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º 4 –∑–Ω–∞–∫–∞ –∏ —Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http'
                        bot.answer_callback_query(self.call.id, response_test,
                                                  show_alert=True)
                        self.state_stack = dict(list(self.state_stack.items())[:-1])
                        if get_video_stats == '–í–∏–¥–µ–æ':
                            self.edit_video()
                        else:
                            self.edit_statistic()
                        return
                self.write_data(data)
                text = '–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞'
                if len(new_video_stats) > 1:
                    text = "–°—Å—ã–ª–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
                bot.answer_callback_query(self.call.id, text,
                                          show_alert=True)
                try:
                    bot.delete_message(chat_id=message.chat.id,
                                       message_id=message.message_id)
                except:
                    pass
                self.state_stack = dict(list(self.state_stack.items())[:-1])
                if get_video_stats == '–í–∏–¥–µ–æ':
                    self.edit_video()
                else:
                    self.edit_statistic()
            else:
                try:
                    bot.delete_message(chat_id=message.chat.id,
                                       message_id=message.message_id)
                except:
                    pass
                response_test = ''
                bot.answer_callback_query(self.call.id, response_test,
                                          show_alert=True)
                self.state_stack = dict(list(self.state_stack.items())[:-1])
                if get_video_stats == '–í–∏–¥–µ–æ':
                    self.edit_video()
                else:
                    self.edit_statistic()
        else:
            if message.message_id:
                try:
                    bot.delete_message(chat_id=message.chat.id,
                                       message_id=message.message_id)
                except:
                    pass
            self.state_stack = dict(list(self.state_stack.items())[:-1])
            if get_video_stats == '–í–∏–¥–µ–æ':
                self.edit_video()
            else:
                self.edit_statistic()

    def dell_video_statis(self):
        self.markup = InlineKeyboardMarkup()
        buttons = []
        text = ['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É']

        if list(self.state_stack.keys())[-2] == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ':
            text = ['–í–∏–¥–µ–æ', '–≤–∏–¥–µ–æ']
        for keys, value in self.load_data()["commands"][self.select_command][text[0]].items():
            is_selected = f"{keys}_{text[0][:5]}_{self.select_command}" in self.selected_video_stat  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            icon = "‚úÖ" if is_selected else "‚ùå"  # –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É
            button_text = f"{icon} {keys}"
            item = types.InlineKeyboardButton(button_text,
                                              callback_data=f"toggle_{keys}_{text[0][:5]}_{self.select_command}")
            buttons.append(item)

        self.markup.add(*buttons)

        save = InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å!", callback_data='save_dell_video_stats')
        cancel = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞!", callback_data='cancel_dell_video_stats')
        self.markup.add(cancel, save)
        new_text = f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ -  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ - {self.select_command} - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {text[-1]} - <u>–£–¥–∞–ª–∏—Ç—å {text[-1]}</u> .\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /back. –í –Ω–∞—á–∞–ª–æ /start \n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"

        bot.edit_message_text(
            new_text,
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id,
            reply_markup=self.markup
        )


if __name__ == "__main__":
    while True:
        try:
            Main()
            bot.infinity_polling(timeout=90, long_polling_timeout=5)
        except:
            continue
